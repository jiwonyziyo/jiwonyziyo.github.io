<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>HCI-Lab on Jiwon KANG</title>
        <link>http://localhost:1313/tags/hci-lab/</link>
        <description>Recent content in HCI-Lab on Jiwon KANG</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Sun, 19 Jan 2025 00:00:00 +0000</lastBuildDate><atom:link href="http://localhost:1313/tags/hci-lab/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>VR Development - Roll A Ball</title>
        <link>http://localhost:1313/post/vrsetup/vrsetup/</link>
        <pubDate>Sun, 19 Jan 2025 00:00:00 +0000</pubDate>
        
        <guid>http://localhost:1313/post/vrsetup/vrsetup/</guid>
        <description>&lt;h3 id=&#34;implementing-the-roll-a-ball-game-in-vr&#34;&gt;Implementing the Roll-a-Ball Game in VR
&lt;/h3&gt;&lt;p&gt;In this blog post, we will apply the &lt;strong&gt;Roll-a-Ball&lt;/strong&gt; game to a VR environment.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;1-initial-setup&#34;&gt;1. Initial Setup
&lt;/h3&gt;&lt;h4 id=&#34;adjusting-the-playboard&#34;&gt;Adjusting the Playboard
&lt;/h4&gt;&lt;p&gt;In a VR environment, the playboard will continuously fall. To prevent this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Add a &lt;strong&gt;Plane&lt;/strong&gt; to provide a stable base.&lt;/li&gt;
&lt;li&gt;Place the playboard on a &lt;strong&gt;Table&lt;/strong&gt; to ensure it remains at a reachable height.&lt;/li&gt;
&lt;/ul&gt;
&lt;div style=&#34;text-align: center;&#34;&gt;
  &lt;img src=&#34;http://localhost:1313/images/14.png&#34; width=&#34;50%&#34;&gt;
  &lt;p style=&#34;font-size: 12px; color: gray;&#34;&gt;Initial Setup&lt;/p&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;h3 id=&#34;2-installing-required-plugins&#34;&gt;2. Installing Required Plugins
&lt;/h3&gt;&lt;p&gt;To develop for VR, we need to install the following Unity plugins:&lt;/p&gt;
&lt;h4 id=&#34;openxr-plugin-installation&#34;&gt;OpenXR Plugin Installation
&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;Go to &lt;strong&gt;Window&lt;/strong&gt; &amp;gt; &lt;strong&gt;Package Manager&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Change &lt;strong&gt;Packages&lt;/strong&gt; to &amp;ldquo;Unity Registry.&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Search for &lt;strong&gt;OpenXR Plugin&lt;/strong&gt; and install it.
&lt;ul&gt;
&lt;li&gt;Unity will restart automatically after installation.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;After installation, navigate to &lt;strong&gt;Edit&lt;/strong&gt; &amp;gt; &lt;strong&gt;Project Settings&lt;/strong&gt; &amp;gt; &lt;strong&gt;XR Plug-in Management&lt;/strong&gt; &amp;gt; &lt;strong&gt;OpenXR&lt;/strong&gt;.
&lt;ul&gt;
&lt;li&gt;Ensure that the &lt;strong&gt;OpenXR feature group&lt;/strong&gt; is enabled.&lt;/li&gt;
&lt;li&gt;Set the appropriate interaction profile, such as &lt;strong&gt;Oculus Touch Controller Profile&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div style=&#34;text-align: center;&#34;&gt;
  &lt;img src=&#34;http://localhost:1313/images/2.png&#34; width=&#34;50%&#34;&gt;
  &lt;p style=&#34;font-size: 12px; color: gray;&#34;&gt;OpenXR Plugin&lt;/p&gt;
&lt;/div&gt;
&lt;h4 id=&#34;xr-interaction-toolkit-installation&#34;&gt;XR Interaction Toolkit Installation
&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;Follow the same steps as above to install &lt;strong&gt;XR Interaction Toolkit.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Download the &lt;strong&gt;Starter Assets&lt;/strong&gt; package.&lt;/li&gt;
&lt;/ol&gt;
&lt;div style=&#34;text-align: center;&#34;&gt;
  &lt;img src=&#34;http://localhost:1313/images/1.png&#34; width=&#34;50%&#34;&gt;
  &lt;p style=&#34;font-size: 12px; color: gray;&#34;&gt;XR Interaction toolkit&lt;/p&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;h3 id=&#34;3-project-settings&#34;&gt;3. Project Settings
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;Navigate to &lt;strong&gt;Edit&lt;/strong&gt; &amp;gt; &lt;strong&gt;Project Settings&lt;/strong&gt; &amp;gt; &lt;strong&gt;XR Plug-in Management.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Check the &lt;strong&gt;Oculus&lt;/strong&gt; option.
&lt;ul&gt;
&lt;li&gt;If a warning icon (!) appears, click &lt;strong&gt;Fix All&lt;/strong&gt; to resolve it.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div style=&#34;text-align: center;&#34;&gt;
  &lt;img src=&#34;http://localhost:1313/images/3.png&#34;  width=&#34;50%&#34;&gt;
  &lt;p style=&#34;font-size: 12px; color: gray;&#34;&gt;Project Setting&lt;/p&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;h3 id=&#34;4-setting-up-xr-interaction-toolkit&#34;&gt;4. Setting Up XR Interaction Toolkit
&lt;/h3&gt;&lt;h4 id=&#34;applying-starter-assets&#34;&gt;Applying Starter Assets
&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;Go to &lt;strong&gt;Assets&lt;/strong&gt; &amp;gt; &lt;strong&gt;Samples&lt;/strong&gt; &amp;gt; &lt;strong&gt;XR Interaction Toolkit&lt;/strong&gt; &amp;gt; &lt;strong&gt;2.2.0&lt;/strong&gt; &amp;gt; &lt;strong&gt;Starter Assets.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Remove all default presets from &lt;strong&gt;ActionBasedContinuousMoveProvider.default.&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div style=&#34;text-align: center;&#34;&gt;
  &lt;img src=&#34;http://localhost:1313/images/4.png&#34;  width=&#34;50%&#34;&gt;
  &lt;p style=&#34;font-size: 12px; color: gray;&#34;&gt;Starter Assets&lt;/p&gt;
&lt;/div&gt;
&lt;div style=&#34;display: flex; justify-content: center; align-items: center;&#34;&gt;
  &lt;div style=&#34;margin-right: 10px; text-align: center;&#34;&gt;
    &lt;img src=&#34;http://localhost:1313/images/5.png&#34; width=&#34;100%&#34;&gt;
    &lt;p style=&#34;font-size: 12px; color: gray;&#34;&gt;&lt;/p&gt;
  &lt;/div&gt;
  &lt;div style=&#34;text-align: center;&#34;&gt;
    &lt;img src=&#34;http://localhost:1313/images/6.png&#34;  width=&#34;100%&#34;&gt;
    &lt;p style=&#34;font-size: 12px; color: gray;&#34;&gt;&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;h3 id=&#34;5-adding-and-configuring-xr-origin&#34;&gt;5. Adding and Configuring XR Origin
&lt;/h3&gt;&lt;h4 id=&#34;configuring-xr-origin&#34;&gt;Configuring XR Origin
&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;Add &lt;strong&gt;XR Origin (Action Based)&lt;/strong&gt; to the Hierarchy.
&lt;ul&gt;
&lt;li&gt;Ensure you select the one labeled &lt;em&gt;(Action Based)&lt;/em&gt; to include the camera and controllers for both hands.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Delete the existing &lt;strong&gt;Main Camera&lt;/strong&gt; from the Hierarchy.&lt;/li&gt;
&lt;li&gt;Add the following components to &lt;strong&gt;XR Origin:&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Character Controller&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Character Controller Driver&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Set &lt;strong&gt;Tracking Origin Mode&lt;/strong&gt; to &lt;strong&gt;Floor&lt;/strong&gt; in the XR Origin component.&lt;/li&gt;
&lt;/ol&gt;
&lt;div style=&#34;text-align: center;&#34;&gt;
  &lt;img src=&#34;http://localhost:1313/images/7.png&#34;  width=&#34;50%&#34;&gt;
  &lt;p style=&#34;font-size: 12px; color: gray;&#34;&gt;XR Origin&lt;/p&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;h3 id=&#34;6-setting-up-the-locomotion-system&#34;&gt;6. Setting Up the Locomotion System
&lt;/h3&gt;&lt;h4 id=&#34;adding-locomotion-system&#34;&gt;Adding Locomotion System
&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;Add &lt;strong&gt;Locomotion System (Action Based)&lt;/strong&gt; from &lt;strong&gt;XR &amp;gt; Locomotion System (Action Based)&lt;/strong&gt; in the Hierarchy.&lt;/li&gt;
&lt;li&gt;Drag it into &lt;strong&gt;XR Origin&amp;rsquo;s Character Controller Driver&lt;/strong&gt; as the &lt;strong&gt;Locomotion Provider.&lt;/strong&gt; (check the image of &lt;strong&gt;XR Origin&lt;/strong&gt;)&lt;/li&gt;
&lt;li&gt;In the Inspector panel, disable or remove:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Teleportation Provider&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Snap Turn Provider&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;configuring-movement&#34;&gt;Configuring Movement
&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;Add &lt;strong&gt;Continuous Move Provider&lt;/strong&gt; and &lt;strong&gt;Continuous Turn Provider.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Disable &lt;strong&gt;Use Reference&lt;/strong&gt; for:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Right Hand Move Action&lt;/strong&gt; in Continuous Move Provider.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Left Hand Turn Action&lt;/strong&gt; in Continuous Turn Provider.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div style=&#34;text-align: center;&#34;&gt;
  &lt;img src=&#34;http://localhost:1313/images/8.png&#34;  width=&#34;50%&#34;&gt;
  &lt;p style=&#34;font-size: 12px; color: gray;&#34;&gt;Locomotion System&lt;/p&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;h3 id=&#34;7-creating-the-hand-controller&#34;&gt;7. Creating the Hand Controller
&lt;/h3&gt;&lt;h4 id=&#34;hand-controller-prefab&#34;&gt;Hand Controller Prefab
&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;Create an &lt;strong&gt;Empty GameObject&lt;/strong&gt; and rename it to &lt;strong&gt;HandController.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Add a &lt;strong&gt;Cube&lt;/strong&gt; and a &lt;strong&gt;Cylinder&lt;/strong&gt; as children:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Cube (Handle)&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Position: (0, 0, -0.11)&lt;/li&gt;
&lt;li&gt;Scale: (0.04, 0.04, 0.1)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cylinder (Pad)&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Position: (0, 0, -0.05)&lt;/li&gt;
&lt;li&gt;Scale: (0.07, 0.024, 0.07)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Remove the colliders from both objects.&lt;/li&gt;
&lt;li&gt;In the &lt;strong&gt;Mesh Renderer&lt;/strong&gt;, set &lt;strong&gt;Cast Shadows&lt;/strong&gt; to &lt;strong&gt;Off.&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div style=&#34;text-align: center;&#34;&gt;
  &lt;img src=&#34;http://localhost:1313/images/10.png&#34;  width=&#34;50%&#34;&gt;
  &lt;p style=&#34;font-size: 12px; color: gray;&#34;&gt;Hand Controller&lt;/p&gt;
&lt;/div&gt;
&lt;h4 id=&#34;configuring-the-right-hand-controller&#34;&gt;Configuring the Right Hand Controller
&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;In the Inspector, remove or disable the following components:
&lt;ul&gt;
&lt;li&gt;XR Ray Interactor&lt;/li&gt;
&lt;li&gt;Line Renderer&lt;/li&gt;
&lt;li&gt;XR Interactor Line Visual&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Add an empty GameObject named &lt;strong&gt;ModelParent&lt;/strong&gt; as a child of &lt;strong&gt;RightHand Controller&lt;/strong&gt; and assign it to the XR Controller&amp;rsquo;s &lt;strong&gt;Model&lt;/strong&gt; field.&lt;/li&gt;
&lt;/ol&gt;
&lt;div style=&#34;text-align: center;&#34;&gt;
  &lt;img src=&#34;http://localhost:1313/images/11.png&#34;  width=&#34;50%&#34;&gt;
  &lt;p style=&#34;font-size: 12px; color: gray;&#34;&gt;Right Hand Controller&lt;/p&gt;
&lt;/div&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Since we need to grab the playboard, we need to add a collider.
&lt;ul&gt;
&lt;li&gt;In Add component, add a &lt;strong&gt;Sphere Collider&lt;/strong&gt;, check &lt;strong&gt;isTrigger&lt;/strong&gt;, and set the radius to 0.5.&lt;/li&gt;
&lt;li&gt;Also add &lt;strong&gt;XR direct interaction&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div style=&#34;text-align: center;&#34;&gt;
  &lt;img src=&#34;http://localhost:1313/images/12.png&#34;  width=&#34;50%&#34;&gt;
  &lt;p style=&#34;font-size: 12px; color: gray;&#34;&gt;Right Hand Controller Inspector&lt;/p&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;h3 id=&#34;8-adding-interaction-to-the-playboard&#34;&gt;8. Adding Interaction to the Playboard
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;Select the &lt;strong&gt;Playboard&lt;/strong&gt; and add the &lt;strong&gt;XR Grab Interactable&lt;/strong&gt; component.&lt;/li&gt;
&lt;li&gt;Create an empty GameObject named &lt;strong&gt;AttachPointL&lt;/strong&gt; under the Playboard.&lt;/li&gt;
&lt;li&gt;Assign &lt;strong&gt;AttachPointL&lt;/strong&gt; to the &lt;strong&gt;Attach Transform&lt;/strong&gt; field of the XR Grab Interactable component.&lt;/li&gt;
&lt;/ol&gt;
&lt;div style=&#34;text-align: center;&#34;&gt;
  &lt;img src=&#34;http://localhost:1313/images/13.png&#34;  width=&#34;50%&#34;&gt;
  &lt;p style=&#34;font-size: 12px; color: gray;&#34;&gt;Playboard&lt;/p&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;h3 id=&#34;9-testing-and-final-results&#34;&gt;9. Testing and Final Results
&lt;/h3&gt;&lt;p&gt;Once all configurations are complete, connect your &lt;strong&gt;Oculus&lt;/strong&gt; headset to the computer and run the game to ensure everything works as expected. Below is the final result of our VR development:&lt;/p&gt;
&lt;div style=&#34;text-align: center;&#34;&gt;
  &lt;video width=&#34;600&#34; controls&gt;
    &lt;source src=&#34;http://localhost:1313/videos/vrvideo.mp4&#34; type=&#34;video/mp4&#34;&gt;
  &lt;/video&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;p&gt;By following these steps, you can successfully adapt your Roll-a-Ball game to VR !!&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Kinect</title>
        <link>http://localhost:1313/post/lab4/kinect/</link>
        <pubDate>Thu, 10 Oct 2024 00:00:00 +0000</pubDate>
        
        <guid>http://localhost:1313/post/lab4/kinect/</guid>
        <description>&lt;img src="http://localhost:1313/images/kinectimage.png" alt="Featured image of post Kinect" /&gt;&lt;h2 id=&#34;what-is-kinect&#34;&gt;What is Kinect?
&lt;/h2&gt;&lt;div style=&#34;text-align: center;&#34;&gt;
  &lt;img src=&#34;http://localhost:1313/images/kinect.png&#34; alt=&#34;Kinect&#34; width=&#34;50%&#34;&gt;
&lt;/div&gt;
&lt;p&gt;Kinect is a motion-sensing device used for recognizing human movement. Kinect includes a 3D depth camera, RGB camera, and microphone array, making it highly effective for tracking body positions and movements. Today, Kinect is widely used in research fields and various HCI projects beyond gaming.&lt;/p&gt;
&lt;h2 id=&#34;purpose-of-a-virtual-environment&#34;&gt;Purpose of a Virtual Environment
&lt;/h2&gt;&lt;p&gt;Using a virtual environment helps in managing project-specific dependencies independently. Each project can have its own set of libraries and versions, preventing conflicts with other projects and streamlining workflow.&lt;/p&gt;
&lt;h3 id=&#34;to-create-and-activate-a-virtual-environment&#34;&gt;To create and activate a virtual environment
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Create the virtual environment folder&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;In the project directory, such as &lt;code&gt;D:\Users\Student\Desktop\kinect&lt;/code&gt;, create a virtual environment using a hidden folder
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;python -m venv .bonjour
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;strong&gt;Activate the virtual environment&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Use this command to activate it
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.&lt;span style=&#34;color:#ae81ff&#34;&gt;\.&lt;/span&gt;bonjour&lt;span style=&#34;color:#ae81ff&#34;&gt;\S&lt;/span&gt;cripts&lt;span style=&#34;color:#ae81ff&#34;&gt;\a&lt;/span&gt;ctivate
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;&lt;strong&gt;Check if activated&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;If activated successfully, the prompt will display &lt;code&gt;(student)&lt;/code&gt; before the directory path, indicating that the virtual environment is in use.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;kinect-and-sensor-configuration&#34;&gt;Kinect and Sensor Configuration
&lt;/h2&gt;&lt;p&gt;Kinect has multiple sensors that capture both image and depth data simultaneously. Data is stored in the project’s &lt;code&gt;data&lt;/code&gt; folder, with image and depth data organized separately.&lt;/p&gt;
&lt;h2 id=&#34;examples-of-kinect-functionalities&#34;&gt;Examples of Kinect Functionalities
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Kinect Fusion Head Scanning&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div style=&#34;text-align: center;&#34;&gt;
  &lt;img src=&#34;http://localhost:1313/images/headscanning.png&#34; alt=&#34;Kinect&#34; width=&#34;50%&#34;&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;As shown in the image above, Kinect Fusion allows 3D head scanning, which reconstructs a detailed 3D model of the user&amp;rsquo;s head. Users can adjust parameters like &amp;ldquo;Volume Max Integration Weight&amp;rdquo; and &amp;ldquo;Volume Voxel Resolution&amp;rdquo; to control the detail and quality of the scan.&lt;/li&gt;
&lt;li&gt;This functionality is useful for applications that require 3D head models, which can be exported as &lt;code&gt;.STL&lt;/code&gt;, &lt;code&gt;.OBJ&lt;/code&gt;, or &lt;code&gt;.PLY&lt;/code&gt; files for use in other software.&lt;/li&gt;
&lt;/ul&gt;
&lt;div style=&#34;text-align: center;&#34;&gt;
  &lt;img src=&#34;http://localhost:1313/images/unity3dhead.png&#34; alt=&#34;Kinect&#34; width=&#34;50%&#34;&gt;
&lt;/div&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;strong&gt;Depth Sensing and Mapping&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div style=&#34;text-align: center;&#34;&gt;
  &lt;img src=&#34;http://localhost:1313/images/depthsensing.png&#34; alt=&#34;Kinect&#34; width=&#34;50%&#34;&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;This image illustrates Kinect’s depth sensing capabilities, where objects are visualized based on their distance from the sensor. Black areas represent regions farthest from the Kinect, while closer areas appear in lighter shades.&lt;/li&gt;
&lt;li&gt;This depth map allows for spatial awareness, essential for applications like gesture recognition and object tracking.&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;&lt;strong&gt;Face Tracking&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div style=&#34;text-align: center;&#34;&gt;
  &lt;img src=&#34;http://localhost:1313/images/facetraking.png&#34; alt=&#34;Kinect&#34; width=&#34;50%&#34;&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;This image showcs Kinect’s face tracking functionality. Here, Kinect detects the user’s face and maps key facial features using a network of lines, making it ideal for applications requiring facial recognition, facial expression analysis, or real-time face-driven animations.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;real-time-data-collection-and-processing&#34;&gt;Real-Time Data Collection and Processing
&lt;/h2&gt;&lt;p&gt;To initiate real-time data collection, run the &lt;code&gt;real_time.py&lt;/code&gt; script:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;python real_time.py
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This script enables real-time detection of faces and bodies. It can be modified to add functionalities such as drawing bounding boxes around detected faces or adding other interactive elements.&lt;/p&gt;
&lt;h2 id=&#34;kinect-sdk-and-toolkit&#34;&gt;Kinect SDK and Toolkit
&lt;/h2&gt;&lt;p&gt;In our project, we’re using the Kinect SDK and the Kinect Developer Toolkit. These tools give us access to Kinect’s main features, like motion tracking, depth sensing, and 3D scanning, making it easier to work with the Kinect sensor. The SDK includes useful sample projects, such as &lt;strong&gt;Skeleton Basics&lt;/strong&gt; for tracking body movements.&lt;/p&gt;
&lt;h2 id=&#34;another-example-of-kinect---skeleton-basics&#34;&gt;Another example of Kinect - Skeleton Basics
&lt;/h2&gt;&lt;div style=&#34;text-align: center;&#34;&gt;
  &lt;video width=&#34;600&#34; controls&gt;
    &lt;source src=&#34;http://localhost:1313/videos/skeleton.mp4&#34; type=&#34;video/mp4&#34;&gt;
  &lt;/video&gt;
&lt;/div&gt;
</description>
        </item>
        <item>
        <title>My First Unity Project - Roll a ball</title>
        <link>http://localhost:1313/post/lab3/unity3dapplication/</link>
        <pubDate>Thu, 03 Oct 2024 00:00:00 +0000</pubDate>
        
        <guid>http://localhost:1313/post/lab3/unity3dapplication/</guid>
        <description>&lt;img src="http://localhost:1313/images/rollaballimage.png" alt="Featured image of post My First Unity Project - Roll a ball" /&gt;&lt;p&gt;Today, I’ll introduce my first Unity 3D project, the classic Roll-a-Ball game.&lt;/p&gt;
&lt;h4 id=&#34;unity-setup&#34;&gt;Unity Setup
&lt;/h4&gt;&lt;p&gt;If you’re interested in how to set up Unity, check out my &lt;a class=&#34;link&#34; href=&#34;https://jiwonyziyo.github.io/post/lab2/setupunity/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Set up Unity&lt;/a&gt;. I cover everything from downloading Unity Hub to configuring the environment for this project.&lt;/p&gt;
&lt;h4 id=&#34;building-the-basics&#34;&gt;Building the Basics
&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Setting the Scene:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I created a new 3D project in Unity and got started by adding a flat &lt;strong&gt;Plane&lt;/strong&gt; as the ground.&lt;/li&gt;
&lt;li&gt;Resized it to &lt;code&gt;(2, 1, 2)&lt;/code&gt; to give our rolling ball plenty of space to move.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Adding the Player:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Next, I created a &lt;strong&gt;Sphere&lt;/strong&gt; object and named it &lt;strong&gt;Player&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Moved the sphere up slightly by setting the Y coordinate to &lt;code&gt;0.5&lt;/code&gt;. This gave it a realistic &amp;ldquo;standing&amp;rdquo; position on the ground.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Adding the Rigidbody Component:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;To enable physics interactions, I added a &lt;strong&gt;Rigidbody&lt;/strong&gt; component to the Player object. This step allows the ball to respond to forces and gravity.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Creating a Player Controller Script:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I added a script called &lt;strong&gt;PlayerController.cs&lt;/strong&gt; to manage the ball&amp;rsquo;s movement.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; UnityEngine;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PlayerController&lt;/span&gt; : MonoBehaviour
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt; speed = &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; Rigidbody rb;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Start()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        rb = GetComponent&amp;lt;Rigidbody&amp;gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; FixedUpdate()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt; moveHorizontal = Input.GetAxis(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Horizontal&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt; moveVertical = Input.GetAxis(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Vertical&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Vector3 movement = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Vector3(moveHorizontal, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0f&lt;/span&gt;, moveVertical);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        rb.AddForce(movement * speed);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This script got the ball rolling!&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;setting-up-the-camera&#34;&gt;Setting Up the Camera
&lt;/h4&gt;&lt;p&gt;For a more immersive experience, I wanted the camera to follow the player. Initially, I tried making the &lt;strong&gt;Main Camera&lt;/strong&gt; a child of the Player object, but that led to a weird, shaky view. So instead, I wrote a &lt;strong&gt;CameraController&lt;/strong&gt; script that allowed the camera to follow the ball smoothly, using a fixed offset.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CameraController&lt;/span&gt; : MonoBehaviour
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; GameObject player;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; Vector3 offset;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Start()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        offset = transform.position - player.transform.position;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; LateUpdate()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        transform.position = player.transform.position + offset;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;adding-the-pick-ups-with-score-variations&#34;&gt;Adding the Pick-Ups with Score Variations
&lt;/h4&gt;&lt;p&gt;I added two types of collectible cubes: &lt;code&gt;PickUpGreenParents&lt;/code&gt; and &lt;code&gt;PickUpOrangeParents&lt;/code&gt;. Each of them affects the score differently:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Green Pick-Ups&lt;/strong&gt;: When the player collects these, the score increases by &lt;strong&gt;+1&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Orange Pick-Ups&lt;/strong&gt;: Collecting an orange pick-up decreases the score by &lt;strong&gt;-1&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Creating Prefabs for Green and Orange Pick-Ups&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I created one green and one orange cube, then saved them as separate prefabs: &lt;code&gt;PickUpGreenParents&lt;/code&gt; (colored green) and &lt;code&gt;PickUpOrangeParents&lt;/code&gt; (colored orange). Prefabs made it easy to duplicate and spread these objects around the scene while keeping the setup consistent.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Configuring Collider and Trigger&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Each prefab was tagged with &lt;code&gt;PickUpGreenParents&lt;/code&gt; or &lt;code&gt;PickUpOrangeParents&lt;/code&gt; so I could handle them differently in the script. I also added a &lt;strong&gt;Collider&lt;/strong&gt; component to each with &amp;ldquo;Is Trigger&amp;rdquo; enabled.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Updating the PlayerController Script&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;To manage scoring, I modified the &lt;strong&gt;PlayerController&lt;/strong&gt; script to check each collected object’s tag. Based on whether the tag was &lt;code&gt;PickUpGreenParents&lt;/code&gt; or &lt;code&gt;PickUpOrangeParents&lt;/code&gt;, the script either increased or decreased the score.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; OnTriggerEnter(Collider other)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (other.gameObject.CompareTag(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;PickUpGreenParents&amp;#34;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        other.gameObject.SetActive(&lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        count = count + &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;  &lt;span style=&#34;color:#75715e&#34;&gt;// Increases score by 1 for green&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        SetCountText();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (other.gameObject.CompareTag(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;PickUpOrangeParents&amp;#34;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        other.gameObject.SetActive(&lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        count = count - &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;  &lt;span style=&#34;color:#75715e&#34;&gt;// Decreases score by 1 for orange&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        SetCountText();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;&lt;strong&gt;Using the SetCountText Method&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;I used the &lt;code&gt;SetCountText()&lt;/code&gt; method to update the score display each time a pick-up was collected, so the player sees their updated score in real-time.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; SetCountText()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        countText.text = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Count: &amp;#34;&lt;/span&gt; + count.ToString();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (count &amp;gt;= &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            winTextObject.SetActive(&lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h4 id=&#34;the-ui-text-hurdle-adding-the-score-and-win-text&#34;&gt;The UI Text Hurdle: Adding the Score and Win Text
&lt;/h4&gt;&lt;p&gt;Here&amp;rsquo;s where I had a small error. I wanted to display the score and a &amp;ldquo;You Win!&amp;rdquo; message, but Unity wasn’t showing the UI objects. I realized I had forgotten to make the &lt;strong&gt;CountText&lt;/strong&gt; and &lt;strong&gt;WinTextObject&lt;/strong&gt; fields in my script public, which prevented me from linking them in the Inspector. Without these fields being public, Unity can’t display the UI elements on screen, so I was left staring at a blank display.&lt;/p&gt;
&lt;p&gt;After making them public, I linked the &lt;strong&gt;CountText&lt;/strong&gt; and &lt;strong&gt;WinTextObject&lt;/strong&gt; objects in the Inspector. Here is the updat code !&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PlayerController&lt;/span&gt; : MonoBehaviour
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt; speed = &lt;span style=&#34;color:#ae81ff&#34;&gt;10f&lt;/span&gt;; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; TextMeshProUGUI countText;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; GameObject winTextObject;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; count;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div style=&#34;text-align: center;&#34;&gt;
  &lt;img src=&#34;http://localhost:1313/images/rollaball.png&#34; alt=&#34;Kinect&#34; width=&#34;100%&#34;&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;h4 id=&#34;adding-accelerometer-input-for-mobile&#34;&gt;Adding Accelerometer Input for Mobile
&lt;/h4&gt;&lt;p&gt;I implemented &lt;strong&gt;accelerometer-based movement&lt;/strong&gt;. This allowed the player to control the ball by tilting their device—a great way to enhance gameplay on smartphones!&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Enabling the Accelerometer&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;To use the accelerometer, I first checked if the device is a mobile device by using an &lt;code&gt;isMobileBuild&lt;/code&gt; flag. I also used &lt;code&gt;InputSystem.EnableDevice&lt;/code&gt; to activate the accelerometer input when running on mobile.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Updating Movement Logic&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In the &lt;code&gt;FixedUpdate&lt;/code&gt; method, I checked for accelerometer data. If it was available, I used that data for movement; otherwise, I defaulted to keyboard input (for desktop testing). Here’s the updated &lt;code&gt;FixedUpdate&lt;/code&gt; code:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; FixedUpdate()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Vector3 movement = Vector3.zero;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (isMobileBuild &amp;amp;&amp;amp; UnityEngine.InputSystem.Accelerometer.current != &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// Get accelerometer data for movement&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Vector3 acceleration = UnityEngine.InputSystem.Accelerometer.current.acceleration.ReadValue();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        AccText.text = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Accelerometer: &amp;#34;&lt;/span&gt; + acceleration.ToString(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;F6&amp;#34;&lt;/span&gt;);  &lt;span style=&#34;color:#75715e&#34;&gt;// Display accelerometer data&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// Map accelerometer data to movement (adjust axes if needed based on phone orientation)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        movement = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Vector3(acceleration.x, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0f&lt;/span&gt;, acceleration.y);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// Use input from the non-mobile build (keyboard/controller input)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        movement = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Vector3(movementX, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0f&lt;/span&gt;, movementY);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// Apply movement force to the rigidbody&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    rb.AddForce(movement * speed);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Enable accelerometer if running on a mobile device&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (isMobileBuild &amp;amp;&amp;amp; UnityEngine.InputSystem.Accelerometer.current != &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    InputSystem.EnableDevice(UnityEngine.InputSystem.Accelerometer.current);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Displaying Accelerometer Data&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;To help debug, I displayed the accelerometer data on the screen using a &lt;code&gt;Text&lt;/code&gt; component (&lt;code&gt;AccText&lt;/code&gt;). This allowed me to confirm the data being received and adjust the movement accordingly.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h4 id=&#34;deploying-as-a-mobile-application&#34;&gt;Deploying as a Mobile Application
&lt;/h4&gt;&lt;p&gt;After implementing accelerometer controls, I wanted to test the game on a mobile device. Since I’m using a &lt;strong&gt;MacBook and iPhone&lt;/strong&gt;, I needed &lt;strong&gt;Xcode&lt;/strong&gt; to build and deploy the app.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Xcode Requirement for iOS Testing&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Initially, I planned to use &lt;strong&gt;Unity Remote 5&lt;/strong&gt; for quick mobile testing. I went to &lt;strong&gt;File &amp;gt; Build Settings &amp;gt; iOS &amp;gt; Switch Platform&lt;/strong&gt; to change the platform to iOS. I also opened &lt;strong&gt;Player Settings&lt;/strong&gt; to configure my project for iOS. However, I discovered that without Xcode installed, Unity wouldn’t let me select &lt;strong&gt;iPhone&lt;/strong&gt; under &lt;strong&gt;Editor &amp;gt; Device&lt;/strong&gt; in &lt;strong&gt;Project Settings&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Installing Xcode&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;To resolve this, I downloaded and installed Xcode from the App Store. This process took a while, but it’s essential for iOS development on Unity.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Using Unity Remote 5 for Quick Testing&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;With Xcode installed, I could finally set the platform to iOS and select &lt;strong&gt;iPhone&lt;/strong&gt; under &lt;strong&gt;Editor &amp;gt; Device&lt;/strong&gt; in &lt;strong&gt;Project Settings&lt;/strong&gt;. I downloaded &lt;strong&gt;Unity Remote 5&lt;/strong&gt; on my iPhone, connected it, and could now use the remote app to test things like accelerometer movement without needing to build and deploy the app.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;demo&#34;&gt;Demo
&lt;/h2&gt;&lt;div style=&#34;text-align: center;&#34;&gt;
  &lt;video width=&#34;600&#34; controls&gt;
    &lt;source src=&#34;http://localhost:1313/videos/rollaball.mov&#34; type=&#34;video/mp4&#34;&gt;
  &lt;/video&gt;
&lt;/div&gt;
</description>
        </item>
        <item>
        <title>Set up Blog</title>
        <link>http://localhost:1313/post/lab1/setupblog/</link>
        <pubDate>Thu, 19 Sep 2024 00:00:00 +0000</pubDate>
        
        <guid>http://localhost:1313/post/lab1/setupblog/</guid>
        <description>&lt;img src="http://localhost:1313/images/hugo.jpg" alt="Featured image of post Set up Blog" /&gt;&lt;p&gt;Today, I&amp;rsquo;ll show you how to set up a blog using Hugo and deploy it on GitHub Pages. I&amp;rsquo;ll be working on a MacBook 💻 (Apple silicon).&lt;/p&gt;
&lt;h2 id=&#34;why-hugo&#34;&gt;Why Hugo?
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;No server-side code&lt;/strong&gt;: Hugo builds purely static files, so there is no need to manage any backend infrastructure.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Fast to render&lt;/strong&gt;: Static sites are quick to render because they are pre-built into HTML before deployment.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;No dynamic content&lt;/strong&gt;: While this means no interactive elements like forms or real-time data updates, it also simplifies maintenance.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;No database&lt;/strong&gt;: Content is stored as files, not in a database, which reduces complexity and overhead.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Often more secure&lt;/strong&gt;: Fewer security vulnerabilities as there are no databases or server-side scripts to attack.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;No real-time UI&lt;/strong&gt;: Hugo sites don’t support real-time updates or interactions without additional tools.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Content is versioned&lt;/strong&gt;: With git, all content can be version controlled, providing an easy way to manage changes and rollbacks.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites
&lt;/h2&gt;&lt;p&gt;Before starting, make sure you have &lt;strong&gt;Homebrew&lt;/strong&gt; and Git installed on your MacBook. If you don&amp;rsquo;t have it, you can install it with the command below:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/bin/bash -c &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To check if Git is already installed, run the following command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git --version
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If Git is not installed, you can install it using Homebrew:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;brew install git
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Once installed, verify it by running &lt;code&gt;git --version&lt;/code&gt; again to ensure everything is set up correctly.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;step-1-install-hugo&#34;&gt;Step 1: Install Hugo
&lt;/h2&gt;&lt;p&gt;To install Hugo, first you open the terminal and run this code&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;brew install hugo
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Once the installation is complete, verify the installation by checking the Hugo version&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;hugo version
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#and if installed correctly, you should see an output similar to the following&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Hugo Static Site Generator v0.74.3/extended darwin/amd64 BuildDate: unknown
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h2 id=&#34;step-2-create-a-new-hugo-site&#34;&gt;Step 2: Create a New Hugo Site
&lt;/h2&gt;&lt;p&gt;Now that Hugo is installed, you can create your new blog. Navigate to the directory where you&amp;rsquo;d like to store your blog and create a new site with the command below:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;hugo new site &amp;lt;nameOftheSite&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Replace &lt;code&gt;nameOftheSite&lt;/code&gt; with your desired name for the blog site.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;step-3-add-a-theme&#34;&gt;Step 3: Add a Theme
&lt;/h2&gt;&lt;p&gt;To give your blog a proper design, you&amp;rsquo;ll need to add a theme. Hugo has a variety of themes available that you can browse and choose from.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Go to the &lt;a class=&#34;link&#34; href=&#34;https://themes.gohugo.io/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Hugo Themes website&lt;/a&gt; to browse available themes.&lt;/li&gt;
&lt;li&gt;Once you find a theme you like, click on it.&lt;/li&gt;
&lt;li&gt;On the theme&amp;rsquo;s page, there will be a &amp;ldquo;Download&amp;rdquo; button. When you click this button, you&amp;rsquo;ll be redirected to the theme&amp;rsquo;s GitHub repository.&lt;/li&gt;
&lt;li&gt;You should check the &lt;code&gt;ReadMe&lt;/code&gt; file on the GitHub repository for instructions on how to apply the theme.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;em&gt;For example, I used the &lt;code&gt;hugo-theme-stack&lt;/code&gt; theme.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;First, initialize git in your project directory (ensure you are in the correct directory):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git init
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then, add the theme as a git submodule:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git submodule add https://github.com/CaiJimmy/hugo-theme-stack/ themes/hugo-theme-stack
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, open the &lt;code&gt;hugo.toml&lt;/code&gt; file and configure Hugo to use this theme by adding the following line:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-toml&#34; data-lang=&#34;toml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;theme&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hugo-theme-stack&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Each theme has different configuration options, so make sure to follow the specific instructions in the theme&amp;rsquo;s GitHub repository. You can also customize it further based on your needs.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;step-31-creating-new-posts&#34;&gt;Step 3.1: Creating New Posts
&lt;/h3&gt;&lt;p&gt;To create a new blog post, you can use the following Hugo command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;hugo new posts/&amp;lt;post-name&amp;gt;.md
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This will create a new Markdown file in the &lt;code&gt;content/posts/&lt;/code&gt; directory. You can then edit this file to write your post.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;hugo new posts/my-first-post.md
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h2 id=&#34;step-4-create-a-new-github-repository&#34;&gt;Step 4: Create a New GitHub Repository
&lt;/h2&gt;&lt;p&gt;To deploy the site to GitHub Pages, you&amp;rsquo;ll need to connect it to a GitHub repository.&lt;/p&gt;
&lt;p&gt;First, create a new repository on your GitHub account.&lt;/p&gt;
&lt;div style=&#34;text-align: center;&#34;&gt;
  &lt;img src=&#34;http://localhost:1313/images/newrepo.jpg&#34; alt=&#34;new_repository&#34; width=&#34;70%&#34;&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;In my case, I created my repository with the name &lt;code&gt;&amp;lt;username&amp;gt;.github.io&lt;/code&gt; and left it public.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Once the repository is created, you&amp;rsquo;ll see a setup page. Here, you&amp;rsquo;ll find instructions on how to push your existing files to this repository.&lt;/p&gt;
&lt;div style=&#34;text-align: center;&#34;&gt;
  &lt;img src=&#34;http://localhost:1313/images/quicksetup.png&#34; alt=&#34;new_repository&#34; width=&#34;70%&#34;&gt;
&lt;/div&gt;
&lt;p&gt;Go back to your terminal and connect your Hugo project to this GitHub repository by following the commands on the setup page (red box).&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;step-5-deploy-to-github-pages&#34;&gt;Step 5: Deploy to GitHub Pages
&lt;/h2&gt;&lt;p&gt;We&amp;rsquo;ll use GitHub Actions to automatically build and deploy the Hugo site to GitHub Pages whenever changes are pushed to the &lt;code&gt;main&lt;/code&gt; branch.&lt;/p&gt;
&lt;p&gt;I followed the steps indicated in the official Hugo documentation: &lt;a class=&#34;link&#34; href=&#34;https://gohugo.io/hosting-and-deployment/hosting-on-github/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Host on GitHub Pages&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Before you deploy it, you should change the &lt;code&gt;baseURL&lt;/code&gt; in the &lt;code&gt;hugo.toml&lt;/code&gt; file to your GitHub Pages URL.&lt;/p&gt;
&lt;p&gt;For example,&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-toml&#34; data-lang=&#34;toml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;baseURL&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://jiwonyziyo.github.io/&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h2 id=&#34;step-6-access-your-site&#34;&gt;Step 6: Access Your Site
&lt;/h2&gt;&lt;p&gt;Once the GitHub Action finishes running, your blog will be deployed to GitHub Pages. You can check your blog by visiting the URL found in &lt;strong&gt;Settings &amp;gt; Pages&lt;/strong&gt;.&lt;/p&gt;
&lt;div style=&#34;text-align: center;&#34;&gt;
  &lt;img src=&#34;http://localhost:1313/images/githuburl.jpg&#34; alt=&#34;github_url&#34; width=&#34;70%&#34;&gt;
&lt;/div&gt;
&lt;p&gt;To see the deployment status, you can also go to the &lt;strong&gt;Actions&lt;/strong&gt; tab in your GitHub repository. If everything went well, you&amp;rsquo;ll see that your site was successfully deployed.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;voilà--now-you-have-a-fully-functioning-personal-blog&#34;&gt;Voilà ! Now you have a fully functioning personal blog!
&lt;/h2&gt;&lt;div style=&#34;text-align: center;&#34;&gt;
  &lt;img src=&#34;http://localhost:1313/images/website.jpg&#34; alt=&#34;website&#34; width=&#34;70%&#34;&gt;
&lt;/div&gt;
</description>
        </item>
        <item>
        <title>Set up Unity</title>
        <link>http://localhost:1313/post/lab2/setupunity/</link>
        <pubDate>Thu, 19 Sep 2024 00:00:00 +0000</pubDate>
        
        <guid>http://localhost:1313/post/lab2/setupunity/</guid>
        <description>&lt;img src="http://localhost:1313/images/unity.jpg" alt="Featured image of post Set up Unity" /&gt;&lt;p&gt;Today, I&amp;rsquo;ll show you the process of setting up Unity on a MacBook 💻.&lt;/p&gt;
&lt;h2 id=&#34;step-1-sign-up-for-a-unity-account&#34;&gt;Step 1: Sign Up for a Unity Account
&lt;/h2&gt;&lt;p&gt;To start using Unity, you&amp;rsquo;ll need to create an account. You can sign up on the &lt;a class=&#34;link&#34; href=&#34;https://id.unity.com/account/new&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Unity website&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Once your account is created, you will have access to Unity Hub.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;step-2-verify-student-status-for-unity-education-license&#34;&gt;Step 2: Verify Student Status for Unity Education License
&lt;/h2&gt;&lt;p&gt;Unity offers free premium access to students through the Unity Student Plan. Follow these steps to verify your student status:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Go to the &lt;a class=&#34;link&#34; href=&#34;https://store.unity.com/academic/unity-student&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Unity Student Plan page&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Click on &lt;strong&gt;Free Access: Post-Secondary&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Log in with the Unity account you created earlier. (&lt;em&gt;I used my personal Google account for registration but verified my student status using my school email.&lt;/em&gt;) During the verification process, you will need to provide your school information and expected graduation year.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;After verification, you will receive a completion email. Click on &lt;strong&gt;Redeem my Student plan&lt;/strong&gt; to finalize the process. Make sure to log in using the same email you used to sign up, not your school email.&lt;/p&gt;
&lt;div style=&#34;text-align: center;&#34;&gt;
  &lt;img src=&#34;http://localhost:1313/images/redeem.png&#34; alt=&#34;redeem&#34; width=&#34;50%&#34;&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You will receive a license key via email, which you will use during the Unity installation process.&lt;/p&gt;
&lt;div style=&#34;text-align: center;&#34;&gt;
  &lt;img src=&#34;http://localhost:1313/images/unitykey.png&#34; alt=&#34;unitykey&#34; width=&#34;50%&#34;&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&#34;step-3-install-unity-hub&#34;&gt;Step 3: Install Unity Hub
&lt;/h2&gt;&lt;p&gt;Unity Hub is a central application for managing Unity installations, projects, and licenses. Here&amp;rsquo;s how to install Unity Hub on your MacBook:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Visit the &lt;a class=&#34;link&#34; href=&#34;https://unity.com/download&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Unity Hub download page&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Download and install Unity Hub for macOS.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Once installed, open Unity Hub and log in with your Unity account.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Now you need to add a license. Click on &lt;strong&gt;Preferences&lt;/strong&gt; in Unity Hub.&lt;/p&gt;
&lt;div style=&#34;text-align: center;&#34;&gt;
  &lt;img src=&#34;http://localhost:1313/images/unitypreferences.png&#34; alt=&#34;preferences&#34; width=&#34;50%&#34;&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In the menu on the left, go to &lt;strong&gt;Licenses&lt;/strong&gt; and click &lt;strong&gt;Add&lt;/strong&gt;. Select &lt;strong&gt;Activate with serial number&lt;/strong&gt;, then enter the license key you received via email.&lt;/p&gt;
&lt;div style=&#34;text-align: center;&#34;&gt;
  &lt;img src=&#34;http://localhost:1313/images/unityadd.png&#34; alt=&#34;Add&#34; width=&#34;50%&#34;&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Your license, which grants one year of access to Unity, will now be active.&lt;/p&gt;
&lt;div style=&#34;text-align: center;&#34;&gt;
  &lt;img src=&#34;http://localhost:1313/images/unitylicence.png&#34; alt=&#34;Licence&#34; width=&#34;50%&#34;&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&#34;step-4-install-a-specific-version-of-unity&#34;&gt;Step 4: Install a Specific Version of Unity
&lt;/h2&gt;&lt;p&gt;For my HCI classes, I need to use a specific version of Unity rather than the latest one. Here’s how you can install a different version:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Open Unity Hub.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Go to the &lt;strong&gt;Installs&lt;/strong&gt; tab.&lt;/p&gt;
&lt;div style=&#34;text-align: center;&#34;&gt;
  &lt;img src=&#34;http://localhost:1313/images/unityinstall.png&#34; alt=&#34;Install tab&#34; width=&#34;30%&#34;&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Click on &lt;strong&gt;Install Editor&lt;/strong&gt; to install a new Unity Editor version.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In the &lt;strong&gt;Choose a version&lt;/strong&gt; section, select &lt;strong&gt;Archive&lt;/strong&gt; from the dropdown to see older versions of Unity.&lt;/p&gt;
&lt;div style=&#34;text-align: center;&#34;&gt;
  &lt;img src=&#34;http://localhost:1313/images/unityversion.png&#34; alt=&#34;Version&#34; width=&#34;50%&#34;&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Select the required version for your class or project.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Choose the &lt;strong&gt;platform modules&lt;/strong&gt; you need (such as iOS, Android, WebGL, etc.).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Click &lt;strong&gt;Next&lt;/strong&gt;, and Unity will begin installing the selected version.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&#34;step-5-set-up-your-first-unity-project&#34;&gt;Step 5: Set Up Your First Unity Project
&lt;/h2&gt;&lt;p&gt;Once Unity is installed, you can create your first project:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Open Unity Hub and go to the &lt;strong&gt;Projects&lt;/strong&gt; tab. Click &lt;strong&gt;New Project&lt;/strong&gt;.&lt;/p&gt;
&lt;div style=&#34;text-align: center;&#34;&gt;
  &lt;img src=&#34;http://localhost:1313/images/unitynewproject.png&#34; alt=&#34;new_project&#34; width=&#34;50%&#34;&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Select a template (e.g., 2D, 3D, etc.) based on the type of project you want to build. Name your project and choose a location for it.&lt;/p&gt;
&lt;div style=&#34;text-align: center;&#34;&gt;
  &lt;img src=&#34;http://localhost:1313/images/unitynewsetup.png&#34; alt=&#34;new_project&#34; width=&#34;50%&#34;&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Click &lt;strong&gt;Create&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Unity will set up the project, and you&amp;rsquo;ll be taken to the Unity Editor where you can start developing.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;voilà-&#34;&gt;Voilà !
&lt;/h2&gt;&lt;p&gt;Good luck, and enjoy building with Unity!&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
